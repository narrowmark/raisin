Usage
-----
Current testing is as follows:

make
./csv [CSV file]

Issues
------
1. General organizational issues need to be resolved.

2. get_next_line() is only able to return a total of four lines because of the
   sizeof function in its test. I found something that seems to work while
   experimenting with different test logic, but looking at it closer under
   Valgrind reveals the following:

>> valgrind --leak-check=full ./csv labels.csv

==6724== Command: ./csv labels.csv
==6724== 
A,1.0,1.1,2.2
C,2.7.1.3
A,1.0,1.0
B,0.0,0.0
B,0.0,0.1
B,0.5,0.1
==6724== Conditional jump or move depends on uninitialised value(s)
==6724==    at 0x409A685: vfprintf (vfprintf.c:1655)
==6724==    by 0x409F7FE: printf (printf.c:34)
==6724==    by 0x80488FE: main (csv.c:103)
==6724== 
==6724== Conditional jump or move depends on uninitialised value(s)
==6724==    at 0x40965C9: vfprintf (vfprintf.c:1655)
==6724==    by 0x409F7FE: printf (printf.c:34)
==6724==    by 0x80488FE: main (csv.c:103)
==6724== 
==6724== Conditional jump or move depends on uninitialised value(s)
==6724==    at 0x402B1D7: free (vg_replace_malloc.c:473)
==6724==    by 0x8048922: main (csv.c:116)
==6724== 
(null)==6724== 
==6724== HEAP SUMMARY:
==6724==     in use at exit: 700 bytes in 7 blocks
==6724==   total heap usage: 9 allocs, 2 frees, 1,564 bytes allocated
==6724== 
==6724== 700 bytes in 7 blocks are definitely lost in loss record 1 of 1
==6724==    at 0x402A185: malloc (vg_replace_malloc.c:296)
==6724==    by 0x80486D1: get_csv_lines (csv.c:31)
==6724==    by 0x80488CC: main (csv.c:98)
==6724== 
==6724== LEAK SUMMARY:
==6724==    definitely lost: 700 bytes in 7 blocks
==6724==    indirectly lost: 0 bytes in 0 blocks
==6724==      possibly lost: 0 bytes in 0 blocks
==6724==    still reachable: 0 bytes in 0 blocks
==6724==         suppressed: 0 bytes in 0 blocks
==6724== 
==6724== For counts of detected and suppressed errors, rerun with: -v
==6724== Use --track-origins=yes to see where uninitialised values come from
==6724== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)

   The three conditional jump errors persist even when using a variable. I
   don't know if this will be a problem later.
